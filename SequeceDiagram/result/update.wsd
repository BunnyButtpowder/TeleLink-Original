@startuml
actor User
boundary "Result Page" as Client
participant "<<middlewares>>\ngetAuth" as mid1
participant "<<middlewares>>\ncheckPermission" as mid2
participant "<<action>>\ngetall" as Controller
entity "Result" as Model1
entity "Report" as Model2
database "MySQL" as DB

User -> Client: type keyword, select sort
activate User
activate Client
Client -> mid1: POST /result/update
activate mid1
alt invalid token
    mid1 --> Client: message, 401
end
alt User not exist
    mid1 --> Client: message, 401
end
mid1 -> mid2: next()
deactivate mid1
activate mid2
alt API not found
    mid2 --> Client: message, 404
end
alt Permission denied
    mid2 --> Client: message, 403
end
mid2 -> Controller: next()
deactivate mid2
activate Controller
alt Outdated Result
Controller --> Client: message, 403
end
Controller -> Model1: find(existingResult)
activate Model1
Model1 -> DB: find()
activate DB
DB --> Model1
deactivate DB
Model1 --> Controller: Result entity
deactivate Model1
alt Result not exist
    Controller --> Client: message, 404
end
alt User doesn't own the Result or not a admin
    Controller --> Client: message, 403
end
Controller -> Model1: updateOne()
activate Model1
Model1 -> DB: updateOne()
activate DB
DB --> Model1
deactivate DB
Model1 --> Controller
deactivate Model1
Controller -> Model2: updateOne()
activate Model2
Model2 -> DB: updateOne()
activate DB
DB --> Model2
deactivate DB
Model2 --> Controller
deactivate Model2
Controller --> Client: message, data, 201
deactivate Controller







deactivate Client

@enduml
